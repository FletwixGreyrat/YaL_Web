import asyncio
import aiogram
import html
import aiosqlite
import datetime
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import types
from aiogram import Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from FSMclasses import *
from keyboards import *
from random import choice

admins = ['820436613', '5722409799','860394447', '5419493305']

botname = 'f_sanonbot'
storage = MemoryStorage()
proxy_url = 'http://proxy.server:3128'
sometoken = '6316567212:AAHPfDJwkQsLnkViYT6a0Aasy6nGVH2LC1A'
maintoken = '6154514452:AAELkAMibEKW3fFRf04IeX61TWIEGIY5dgI'
bot: Bot = Bot(token=maintoken)
dp: Dispatcher = Dispatcher(bot=bot, storage=storage)
commandsList = ['/start', '/setgreet', '/stat', '/setname', '/hide']


def sendlink(link):
    return f"""üé≠–ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
üëâüèª {link} üëàüèª

–ü—Ä–æ—Å—Ç–æ —Ä–∞–∑–º–µ—Å—Ç–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –ª—é–±—ã—Ö —Å–æ—Ü. —Å–µ—Ç—è—Ö –∏ –Ω–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üí¨"""


@dp.message_handler(commands=['start'], state=None)
async def StartCMD(message: types.Message, state: FSMContext):
    try:
        db = await aiosqlite.connect('data.db')
        lstmes = message.text.split()
        user = await db.execute(f'SELECT * FROM users WHERE userId={message.from_user.id}')
        user = await user.fetchone()
        if user is None:
            userBot = id(message.from_user.id)
            result = await db.execute("SELECT number FROM users ORDER BY number DESC LIMIT 1")
            result = await result.fetchone()
            currentDatetime = datetime.datetime.now().strftime("%d.%m,%Y")
            await db.execute(
                f"INSERT INTO users (userId, userBot, messages, answers, mygreet, number, amountMessages, amountAnswers, date) VALUES ('{message.from_user.id}', '{userBot}', 0, 0, 'default', {result[0] + 1}, 0, 0, '{currentDatetime}')")
            await db.commit()
        user = await db.execute(f'SELECT * FROM users WHERE userId={message.from_user.id}')
        user = await user.fetchone()
        link = f'https://t.me/{botname}?start={user[1]}'
        if lstmes[-1] == user[1]:
            await message.answer(sendlink(link), parse_mode='html')
            return
        if len(lstmes) == 2:

            to_user = await db.execute(f'SELECT * FROM users WHERE userBot="{lstmes[-1]}"')
            to_user = await to_user.fetchone()

            if to_user is None:
                await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —Å–º–µ–Ω–∏–ª —Å—Å—ã–ª–∫—É")
                return
        
            await sendAnonimMessage.message.set()
            async with state.proxy() as data:
                data['to'] = lstmes[-1]
                data['msg'] = 'fromlink'
            await message.answer("""üí´ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É, –ø–æ —Å—Å—ã–ª–∫–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–µ—à–ª–∏.

–ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω —Å—Ä–∞–∑—É –∂–µ —É–∑–Ω–∞–µ—Ç –æ–± —ç—Ç–æ–º, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è. –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æüé≠.

–ù–∏ –≤ —á—ë–º —Å–µ–±–µ –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞–π—Ç–µ!
                                 
‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º)""", reply_markup=kb1(message.from_user.id))
            link = f'https://t.me/{botname}?start={user[1]}</code>'
        
            if not to_user[4] == 'default':
                await message.answer(to_user[4])
            return
        await db.commit()
        user = await db.execute(f'SELECT * FROM users WHERE userId={message.from_user.id}')
        user = await user.fetchone()
        link = f'https://t.me/{botname}?start={user[1]}'
        await message.answer(sendlink(link), parse_mode='html')
        await db.close()
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}    {message.from_user.first_name}')


@dp.callback_query_handler(text_startswith='otmena', state=sendAnonimMessage.message)
async def OtmenaCMD(call: types.CallbackQuery, state: FSMContext):
    try:
        await state.finish()
        db = await aiosqlite.connect('data.db')
        data = call.data.split(':')
        user = await db.execute(f'SELECT * FROM users WHERE userId={data[1]}')
        user = await user.fetchone()
        link = f'https://t.me/{botname}?start={user[1]}'
        await call.message.edit_text(sendlink(link), parse_mode='html')
        await db.close()
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}    {call.from_user.first_name}')

@dp.message_handler(content_types=['any'], state=sendAnonimMessage.message)
async def MessageCMD(message: types.Message, state: FSMContext):
    if message.text in commandsList:
        await message.delete()
        return
    try:
        db = await aiosqlite.connect('data.db')
        user = await db.execute(f'SELECT * FROM users WHERE userId={message.from_user.id}')
        user = await user.fetchone()

        await db.execute(f"UPDATE users SET messages={user[2] + 1} WHERE userId='{message.from_user.id}'")
        await db.commit()

        userName = f'<a href="tg://user?id={html.escape(str(message.from_user.id))}">{html.escape(message.from_user.first_name)}</a>'
        if message.from_user.username is None:
            message.from_user.username = '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        if message.from_user.last_name is None:
            message.from_user.last_name = '–æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç'

        async with state.proxy() as data:
            odmen = await db.execute(f"SELECT * FROM users WHERE userBot='{data['to']}'")
            odmen = await odmen.fetchone()
            personal_admin = await bot.get_chat(odmen[0])
            to_admin = f'–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å {personal_admin.first_name}\n–ò–º—è: {userName} \n–§–∞–º–∏–ª–∏—è: {html.escape(message.from_user.last_name)}\n–ê–π–¥–∏: {message.from_user.id}\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}\n–û–ø–∞) –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫–æ—Ä–µ–π —Å–º–æ—Ç—Ä–∏ —á—Ç–æ —Ç–∞–ºü§´\n\n'

            to_user = await db.execute(f'SELECT * FROM users WHERE userBot="{data["to"]}"')
            to_user = await to_user.fetchone()

            if to_user is None:
                msg = await message.answer("–û—à–∏–±–∫–∞! –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –≠—Ç–æ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–æ –¥–≤—É–º—è –ø—Ä–∏—á–∏–Ω–∞–º–∏:\n1.–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n2.–ê–¥—Ä–µ—Å–∞—Ç —Å–º–µ–Ω–∏–ª –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—å—Ç–µ–ª—è.")
                await asyncio.sleep(5)
                await message.delete()
                await state.finish()
                return

            zxc = await db.execute(f'SELECT * FROM users WHERE userId={message.from_user.id}')
            zxc = await zxc.fetchone()

            if message.photo:
                if to_user[0] in admins:
                    if message.caption is None:
                        message.caption = ''
                    await bot.send_photo(to_user[0], photo=message.photo[-1].file_id,
                                     caption=to_admin + html.escape(message.caption), parse_mode=types.ParseMode.HTML,
                                     reply_markup=answerkb(zxc[5]))
                else:
                    if message.caption is None:
                        message.caption = ''
                    await bot.send_photo(to_user[0], photo=message.photo[-1].file_id,
                                     caption='–û–ø–∞) –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫–æ—Ä–µ–π —Å–º–æ—Ç—Ä–∏ —á—Ç–æ —Ç–∞–ºü§´\n\n' + html.escape(message.caption),
                                     parse_mode=types.ParseMode.HTML,
                                     reply_markup=answerkb(zxc[5]))
            if message.text:
                if to_user[0] in admins:
                    await bot.send_message(to_user[0], text=to_admin + html.escape(message.text), parse_mode=types.ParseMode.HTML,
                                       reply_markup=answerkb(zxc[5]))
                else:
                    await bot.send_message(to_user[0], text='–û–ø–∞) –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫–æ—Ä–µ–π —Å–º–æ—Ç—Ä–∏ —á—Ç–æ —Ç–∞–ºü§´\n\n' + html.escape(message.text), parse_mode=types.ParseMode.HTML,
                                       reply_markup=answerkb(zxc[5]))
            if message.video:
                if to_user[0] in admins:
                    if message.caption is None:
                        message.caption = ''
                    await bot.send_video(to_user[0], video=message.video.file_id, caption=to_admin + html.escape(message.caption),
                                     parse_mode=types.ParseMode.HTML,
                                     reply_markup=answerkb(zxc[5]))
                else:
                    if message.caption is None:
                        message.caption = ''
                    await bot.send_video(to_user[0], video=message.video.file_id,
                                     caption='–û–ø–∞) –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫–æ—Ä–µ–π —Å–º–æ—Ç—Ä–∏ —á—Ç–æ —Ç–∞–ºü§´\n\n' + html.escape(message.caption),
                                     parse_mode=types.ParseMode.HTML,
                                     reply_markup=answerkb(zxc[5]))
            if message.sticker:
                if to_user[0] in admins:
                    await bot.send_message(to_user[0], to_admin, parse_mode=types.ParseMode.HTML)
                else:
                    await bot.send_message(to_user[0], '–û–ø–∞) –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫–æ—Ä–µ–π —Å–º–æ—Ç—Ä–∏ —á—Ç–æ —Ç–∞–ºü§´\n\n')
                await bot.send_sticker(to_user[0], sticker=message.sticker.file_id,
                                   reply_markup=answerkb(zxc[5]))
            await message.answer('–í—Å—ë —Å—É–ø–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=againkb(to_user[5]))

            user = await db.execute(f"SELECT * FROM users WHERE userId={message.from_user.id}")
            user = await user.fetchone()
            currentDatetime = datetime.datetime.now().strftime("%d.%m,%Y")


            if currentDatetime == user[8]:
                await db.execute(f"UPDATE users SET amountMessages={user[6] + 1} WHERE userBot='{user[1]}'")
            else:
                await db.execute(f"UPDATE users SET date='{currentDatetime}' WHERE userBot='{user[1]}'")
                await db.execute(f"UPDATE users SET amountMessages=1 WHERE userBot='{user[1]}'")
                await db.execute(f"UPDATE users SET amountAnswers=1 WHERE userBot='{user[1]}'")

            await db.commit()
        link = f'https://t.me/{botname}?start={user[1]}'
        await message.answer(sendlink(link), parse_mode=types.ParseMode.HTML)
        await state.finish()
        await db.close()
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}    {message.from_user.first_name}')

@dp.callback_query_handler(text_startswith='a:', state=None)
async def sendanswer(call: types.CallbackQuery, state: FSMContext):
    try:
        dat = call.data.split(':')
        db = await aiosqlite.connect('data.db')
        user = await db.execute(f"SELECT * FROM users WHERE number='{dat[1]}'")
        user = await user.fetchone()

        await sendAnonimAnswer.answer.set()
        async with state.proxy() as data:
            data['to'] = user[0]
            if call.message.text:
                if call.message.text.startswith('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å '):
                    data['answer'] = '¬´' +  ' '.join(call.message.text.split("\n")[6:])[0:30] + '¬ª'
                elif call.message.text.startswith('–û—Ç–≤–µ—Ç –Ω–∞') or call.message.text.startswith('–û–ø–∞)'):
                    data['answer'] = '¬´' +  ' '.join(call.message.text.split('\n')[1:])[0:30] + '¬ª'

            elif call.message.sticker:
                data['answer'] = '—Å—Ç–∏–∫–µ—Ä'

            elif call.message.photo:
                data['answer'] = '—Ñ–æ—Ç–æ'

            elif call.message.video:
                data['answer'] = '–≤–∏–¥–µ–æ'

        await bot.send_message(call.message.chat.id, '–ù—É —á—Ç–æ, –ø–∏—à–∏ –æ—Ç–≤–µ—Ç, —Ä–∞–∑ –Ω–∞–∂–∞–ª:', reply_markup=stopkb())
        await db.close()
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}    {call.from_user.first_name}')


@dp.callback_query_handler(text='otmenans', state=sendAnonimAnswer.answer)
async def stopanswerCMD(call: types.CallbackQuery, state: FSMContext):
    try:
        await state.finish()
        await call.message.edit_text("–ù—É –≤–æ—Ç, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞(")
        await asyncio.sleep(3)
        await call.message.delete()
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}    {call.from_user.first_name}')


@dp.message_handler(content_types=['any'], state=sendAnonimAnswer.answer)
async def sendAnswer(message: types.Message, state: FSMContext):
    if message.text in commandsList:
        await message.delete()
        return
    try:
        db = await aiosqlite.connect('data.db')
        user = await db.execute(f'SELECT * FROM users WHERE userId={message.from_user.id}')
        user = await user.fetchone()
        userName = f'<a href="tg://user?id={message.from_user.id}">{html.escape(str(message.from_user.first_name))}</a>'

        async with state.proxy() as data:
            answeer = f"<b>–û—Ç–≤–µ—Ç –Ω–∞ {html.escape(data['answer'])}...</b>\n\n"

            odmen = await db.execute(f"SELECT * FROM users WHERE userId='{data['to']}'")
            odmen = await odmen.fetchone()

            personal_admin = await bot.get_chat(odmen[0])
            to_admin = f'–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å {html.escape(personal_admin.first_name)}\n–ò–º—è: {userName} \n–§–∞–º–∏–ª–∏—è: {html.escape(str(message.from_user.last_name))}\n–ê–π–¥–∏: {message.from_user.id}\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{str(message.from_user.username)}\n'

            to_user = await db.execute(f'SELECT * FROM users WHERE userId="{data["to"]}"')
            to_user = await to_user.fetchone()
            if to_user is None:
                await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∞–¥—Ä–µ—Å–∞—Ç —É–∂–µ –∏–∑–º–µ–Ω–∏–ª –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Å—ã–ª–∫–µ')
                await state.finish()
                return
        

            zxc = await db.execute(f'SELECT * FROM users WHERE userId={message.from_user.id}')
            zxc = await zxc.fetchone()

            if message.photo:
                if to_user[0] in admins:
                    if message.caption is None:
                        message.caption = ''
                    await bot.send_photo(to_user[0], photo=message.photo[-1].file_id,
                                     caption=to_admin + answeer + html.escape(message.caption),
                                     parse_mode=types.ParseMode.HTML,
                                     reply_markup=answerkb(zxc[5]))
                else:
                    if message.caption is None:
                        message.caption = ''
                    await bot.send_photo(to_user[0], photo=message.photo[-1].file_id,
                                     caption=answeer + html.escape(message.caption),
                                     parse_mode=types.ParseMode.HTML,
                                     reply_markup=answerkb(zxc[5]))
            if message.text:
                if to_user[0] in admins:
                    await bot.send_message(to_user[0], text=to_admin + answeer + html.escape(message.text),
                                       parse_mode=types.ParseMode.HTML,
                                       reply_markup=answerkb(zxc[5]))
                else:
                    await bot.send_message(to_user[0], text=answeer + html.escape(message.text),
                                       parse_mode=types.ParseMode.HTML,
                                       reply_markup=answerkb(zxc[5]))
            if message.video:
                if to_user[0] in admins:
                    if message.caption is None:
                        message.caption = ''
                    await bot.send_video(to_user[0], video=message.video.file_id,
                                     caption=to_admin + answeer + html.escape(message.caption),
                                     parse_mode=types.ParseMode.HTML,
                                     reply_markup=answerkb(zxc[5]))
                else:
                    if message.caption is None:
                        message.caption = ''
                    await bot.send_video(to_user[0], video=message.video.file_id,
                                     caption=answeer + html.escape(message.caption),
                                     parse_mode=types.ParseMode.HTML,
                                     reply_markup=answerkb(zxc[5]))
            if message.sticker:
                if to_user[0] in admins:
                    await bot.send_message(to_user[0], text=to_admin + answeer,
                                       parse_mode=types.ParseMode.HTML)
                else:
                    await bot.send_message(to_user[0], answeer)
                await bot.send_sticker(to_user[0], sticker=message.sticker.file_id,
                                   reply_markup=answerkb(zxc[5]))
            await message.answer('–£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ωüòé')
            await state.finish()
            user = await db.execute(f"SELECT * FROM users WHERE userId={message.from_user.id}")
            user = await user.fetchone()

            await db.execute(f"UPDATE users SET answers = {user[6] + 1} WHERE userId='{message.from_user.id}'")
            currentDatetime = datetime.datetime.now().strftime("%d.%m,%Y")
            user = await db.execute(f"SELECT * FROM users WHERE userBot='{user[1]}'")
            user = await user.fetchone()
            if currentDatetime == user[8]:
                await db.execute(f"UPDATE users SET amountAnswers={user[7] + 1} WHERE userBot='{user[1]}'")
            else:
                await db.execute(f"UPDATE users SET date='{currentDatetime}' WHERE userBot='{user[1]}'")
                await db.execute(f"UPDATE users SET amountAnswers=1 WHERE userBot='{user[1]}'")
                await db.execute(f"UPDATE users SET amountMessages=1 WHERE userBot='{user[1]}'")
        await db.commit()
        await db.close()
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}    {message.from_user.first_name}')

@dp.callback_query_handler(text_startswith='again:', state=None)
async def againCMD(call: types.CallbackQuery, state: FSMContext):
    try:
        userdata = call.data.split(":")[1]
        db = await aiosqlite.connect('data.db')
        cursor = await db.execute(f'SELECT * FROM users WHERE number={int(userdata)}')
        userdata = await cursor.fetchone()
        await sendAnonimMessage.message.set()
        async with state.proxy() as data:
            data['to'] = userdata[1]
        await bot.send_message(call.message.chat.id, '–•–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë —Å–æ–æ–±—â–µ–Ω–∏–µ? –°–º–µ–ª–æ —Ç—ã–∫–∞–π):')
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}    {call.from_user.first_name}')


@dp.message_handler(commands=['setgreet'], state=None)
async def setgreet(message: types.Message):
    try:
        await message.answer(
        '–ù—É —á—Ç–æ, –ø–∏—à–∏ –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ, —Ç–≤–æ–∏–º —Ñ–∞–Ω–∞—Ç–∞–º. –¢–æ–ª—å–∫–æ –Ω–µ –±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å?üëâüèªüëàüèª –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏ .stop')
        await setgreetFSM.greeting.set()
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}    {message.from_user.first_name}')

@dp.message_handler(content_types=['text'], state=setgreetFSM.greeting)
async def loadGreet(message: types.Message, state: FSMContext):
    if message.text in commandsList:
        await message.delete()
        return
    try:
        db = await aiosqlite.connect('data.db')
        if message.text == '.stop':
            await state.finish()
            await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        if len(message.text) > 100:
            await state.finish()
            await message.answer(' –ê-–∞-–∞-–π.. —Å-—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ... –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–Ω–µ –Ω—É–∂–Ω–æ –∫–æ—Ä–æ—á–µ..ü•∫')
            return
        await db.execute(f"UPDATE users SET mygreet = '{message.text}' WHERE userId = '{message.from_user.id}'")
        await message.answer(
        '–°—É–ø–µ—Ä, –µ—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ —É —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ–≥–æ —É–¥–∞–ª–∏—Ç—å, –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø–∏—à–∏ –≤ –Ω–æ–≤–æ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–ª–æ–≤–æ default –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ')
        await state.finish()
        await db.commit()
        await db.close()
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}    {message.from_user.first_name}')

@dp.message_handler(commands=['stat'])
async def statCMD(message: types.Message):
    try:
        db = await aiosqlite.connect("data.db")
        user = await db.execute(f'SELECT * FROM users WHERE userId={message.from_user.id}')
        user = await user.fetchone()

        currentDatetime = datetime.datetime.now().strftime("%d.%m,%Y")
        if currentDatetime != user[8]:
            await db.execute(f"UPDATE users SET amountAnswers=0 WHERE userBot='{user[1]}'")
            await db.execute(f"UPDATE users SET amountMessages=0 WHERE userBot='{user[1]}'")

        user = await db.execute(f'SELECT * FROM users WHERE userId={message.from_user.id}')
        user = await user.fetchone()
        await message.answer(
        f"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n\n–°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {user[6]}\n–û—Ç–≤–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {user[7]}\n\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user[2]}\n–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {user[3]}""")
        await db.commit()
        await db.close()
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}    {message.from_user.first_name}')

@dp.message_handler(commands='setname')
async def setnameCMD(message: types.Message):
    try:
        await message.answer("–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã (–∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ), "
                             "—Ü–∏—Ñ—Ä—ã –∏ –Ω–∏–∂–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ –¥–≤–∞–¥—Ü–∞—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤. \n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã:")
        await setnameFSM.newname.set()
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}    {message.from_user.first_name}')

@dp.message_handler(content_types='text', state=setnameFSM.newname)
async def nameCMD(message: types.Message, state: FSMContext):
    if message.text in commandsList:
        await message.delete()
        return
    try:
        async with state.proxy() as data:
            data['name'] = message.text
            data['id'] = message.from_user.id
            if len(data['name']) > 20:
                await state.finish()
                await message.answer("–ê-–∞-–∞-–π.. —Å-—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ... –ò–ú–Ø-–Ø-–Ø, –º–Ω–µ –Ω—É–∂–Ω–æ –∫–æ—Ä–æ—á–µ..ü•∫")
                return
        for i in message.text:
            if not i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_':
                await message.answer("–ò–º—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                await state.finish()
                return
        db = await aiosqlite.connect('data.db')
        user = await db.execute(f"SELECT * FROM users WHERE userBot='{data['name']}'")
        user = await user.fetchone()
        if not user is None:
            await message.answer("–ù—É –±–ª–∏–Ω, —ç—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –ø—Ä–∏–¥—É–º–∞–π –Ω–æ–≤–æ–µ(")
            await state.finish()
            return
        link = f'https://t.me/{botname}?start={data["name"]}'
        await message.answer(f'–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è {data["name"]} –¥–ª—è —Å—Å—ã–ª–∫–∏ –≤ –±–æ—Ç–µ? –°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–æ—Ç —Ç–∞–∫:\n\n{link}', reply_markup=yesornokb())
        await setnameFSM.next()
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}    {message.from_user.first_name}')

@dp.callback_query_handler(text='yes', state=setnameFSM.agree)
async def yesCMD(call: types.CallbackQuery, state: FSMContext):
    try:
        db = await aiosqlite.connect('data.db')
        async with state.proxy() as data:
            await db.execute(f"UPDATE users SET userBot='{data['name']}' WHERE userId='{data['id']}'")

        link = f'https://t.me/{botname}?start={data["name"]}'
        await call.message.answer(f"–£—Ä–∞, –∏–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–æ—Ç —Ç–≤–æ—è –Ω–æ–≤–∞—è —Å—Å—ã–ª–æ—á–∫–∞):\n\n{link}")
        await state.finish()
        await db.commit()
        await db.close()
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}    {call.from_user.first_name}')

@dp.callback_query_handler(text='no', state=setnameFSM.agree)
async def noCMD(call: types.CallbackQuery, state: FSMContext):
    try:
        await state.finish()
        await call.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë?..")
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}    {call.from_user.first_name}')


@dp.message_handler(commands=['hide'])
async def hideCMD(message: types.Message):
    try:
        if not str(message.from_user.id) in admins:
            return
        if not message.reply_to_message:
            await message.answer('–î—É—Ä–∞–∫, —è –µ–±—É, —á—Ç–æ –ø—Ä—è—Ç–∞—Ç—å? –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–ø—Ä—è—Ç–∞—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π ')
            return
        cdata = message.reply_to_message.reply_markup
        if cdata is None:
            await message.answer('–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å')
            return
        cdata = cdata.inline_keyboard
        cdata = dict(*list(*cdata))['callback_data']
        cdata = cdata.split(':')[1:]
        if message.reply_to_message.text:
            msg = message.reply_to_message.text
            await message.reply_to_message.edit_text('\n'.join(msg.split('\n')[5:]), reply_markup=answerkb(cdata[0]))
        elif message.reply_to_message.photo or message.reply_to_message.video:
            msg = message.reply_to_message.caption
            await message.reply_to_message.edit_caption('\n'.join(msg.split('\n')[5:]), reply_markup=answerkb(cdata[0]))
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}    {message.from_user.first_name}')

@dp.message_handler(commands=['send'])
async def sendToAll(message: types.Message):
    try:
        if not str(message.from_user.id) in admins:
            return
        if len(message.text) <= 6:
            return
        else:
            await message.answer(message.text[6:], reply_markup=yesorno1Kb())
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}    {message.from_user.first_name}')

@dp.callback_query_handler(text_startswith='send:')
async def sendorno(call: types.CallbackQuery):
    try:
        dat = call.data.split(':')[1]
        if dat == 'b':
            return
        db = await aiosqlite.connect('data.db')
        cursor = await db.execute("SELECT * FROM users")
        users = await cursor.fetchall()
        for i in users:
            try:
                await bot.send_message(i[0], text=call.message.text)
            except (aiogram.exceptions.ChatNotFound, aiogram.exceptions.BotBlocked):
                pass
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}    {call.from_user.first_name}')

@dp.message_handler()
async def link(message: types.Message):
    try:
        db = await aiosqlite.connect('data.db')
        user = await db.execute(f'SELECT * FROM users WHERE userId={message.from_user.id}')
        user = await user.fetchone()
        link = f'https://t.me/{botname}?start={user[1]}'
        await message.answer(sendlink(link), parse_mode=types.ParseMode.HTML)
        await db.commit()
        await db.close()
        return
    except Exception as error:
        await bot.send_message(int(admins[1]), text=f'–û—à–∏–±–∫–∞ {error}\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}    {message.from_user.first_name}')



if __name__ == '__main__':
    aiogram.executor.start_polling(dispatcher=dp, skip_updates=True)
